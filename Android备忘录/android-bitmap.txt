Android  高效加载大图

   主要是介绍如何处理和加载Bitmap对象的常用方法，这些方法避免程序UI不会被卡到，同时不会超出应用的内存限制。
   Bitmaps会迅速的消耗你可用的内存从而导致程序crash，出现下面的异常:java.lang.OutofMemoryError: bitmap size exceeds VM budget.
   
   加载Bitmap需要小心处理的原因：
    1 移动设备的系统资源有限。Android设备对于单个程序至少需要16MB的内存。Android Compatibility Definition Document (CDD), Section 3.7. Virtual Machine Compatibility 给出了对于不同大小与密度的屏幕的最低内存需求。 程序应该在这个最低内存限制下去优化程序的效率。当然，大多数设备的都有更高的限制需求。
	2 Bitmap会消耗很多内存，特别是对于类似照片等内容更加丰富的图片
	3 Android应用的UI通常会在一次操作中立即加载许多张bitmaps。 例如在ListView, GridView 与 ViewPager 等组件中通常会需要一次加载许多张bitmaps，而且需要预先加载一些没有在屏幕上显示的内容，为用户滑动的显示做准备
	
	
	
	一 ：读取位图的尺寸和类型
	
	BitmapFactory提供了一些decode的方法 (decodeByteArray(), decodeFile(), decodeResource(), etc.) 用来从不同的资源中创建一个Bitmap。 根据你的图片数据源来选择合适的decode方法。 那些方法在构造位图的时候会尝试分配内存，因此会容易导致OutOfMemory的异常
	
	每种decode方法都支持通过BitmapFactory.Options 来设置一些附加的属性标记
	
	 inJustDecodeBounds 属性可以使你在分配内存之前获取bitmap的height，width，mime属性。
	 
	 BitmapFactory.Options options = new BitmapFactory.Options();
	 options.inJustDecodeBounds = true ;
	 BitmapFactory.decodeResource(context.getResources(), resourceId,options);
	 int imageHeigth = options.outHeight ;
	 int imageWidth = options.outWidth;
	 String imageType =options.outMimeType;
	 
	 
	 
   二 加载一个按比例缩小的版本到内存中
    通过上面的步骤我们已经知道了图片的尺寸，那些数据可以用来决定是应该加载整个图片到内存中还是加载一个缩小的版本。有下面一些因素需要考虑：
	
	 1 评估加载完整图片所需要的内存
	 2 程序在加载这张图片时，设计到其他内存需求
	 3 呈现这张图片组建的尺寸大小
	 4 屏幕大小与当前设备的分辨率，屏幕密度
	 
	 /*
	 * 计算图片的inSampleSize
	 * 设置inSampleSize为2的幂是因为decoder最终还是会对非2的幂的数进行向下处理，获取到最靠近2的幂的数
	 */
	public static int calculateInSampleSize(BitmapFactory.Options options,int reqWidth,int reqHeight){
		final int height = options.outHeight;
		final int width = options.outWidth;
		int inSampleSize = 1 ;
		
		if(height > reqHeight || width > reqWidth){
			final int halfHeigth =height/2;
			final int halfWidth = width /2 ;
			while((halfHeigth/inSampleSize) > reqHeight && 
				   (halfWidth/inSampleSize) > reqWidth){
				inSampleSize *= 2 ;	
			}
		 }
		return inSampleSize ;
	}
	
	
	
  三 异步加载图片
  
  /**
	 * 异步加载图片
	 * 为ImageView使用WeakReference 确保了 AsyncTask 所引用的资源可以被GC。因为当任务结束时
	 * 不能确保 ImageView 仍然存在，因此你必须在 onPostExecute() 里面去检查引用。这个ImageView 
	 * 是有可能已经不存在了，例如，在任务结束之前用户操作回退离开那个Activity或者是设备发生配置改变(如旋转屏幕等)。
	 */
	class BitmapWorkerTask extends AsyncTask<Integer,Integer,Bitmap>{

		private  WeakReference<ImageView> imageViewReference ;
		private int data = 0 ;
		private Context  context ;
		
		public BitmapWorkerTask(Context context ,ImageView imageView){
			//use a weakreference to ensure  the imageview can be garbage collected
			imageViewReference = new WeakReference<ImageView>(imageView);
			this.context = context ;
		}
		
		@Override
		protected Bitmap doInBackground(Integer... param) {
			data = param[0];
			decodeSampledBitmapFromResource(context.getResources(),data,100,100);
			return null;
		}
		
		@Override
		protected void onPostExecute(Bitmap bitmap) {
			if(imageViewReference!=null && bitmap !=null){
				final ImageView imageView = imageViewReference.get();
				if(imageView != null){
					imageView.setImageBitmap(bitmap);
				}
			}
		}
		@Override
		protected void onProgressUpdate(Integer... progress) {
			super.onProgressUpdate(progress);
		}
	}
	 
	 
	//处理并发问题
	ImageView保存最近使用的AsyncTask的引用，这个引用可以在任务完成的时候再次读取检查。使用这种方式, 前面提到的AsyncTask 就可以扩展出一个相近的模型。创建一个专用的 Drawable 子类来保存一个可以回到当前工作任务的引用。在这种情况下，BitmapDrawable 被用来作为占位图片，它可以在任务结束时显示到ImageView中

    static class AsyncDrawable extends BitmapDrawable {
    private final WeakReference bitmapWorkerTaskReference;

    public AsyncDrawable(Resources res, Bitmap bitmap,
            BitmapWorkerTask bitmapWorkerTask) {
        super(res, bitmap);
        bitmapWorkerTaskReference =
            new WeakReference(bitmapWorkerTask);
    }

    public BitmapWorkerTask getBitmapWorkerTask() {
        return bitmapWorkerTaskReference.get();
    }
   }
   
   在执行	BitmapWorkerTask 之前，需要创建一个AsyncDrawable ，绑定到目标组件ImageView上：
   public void loadBitmap(int resId, ImageView imageView) {
    if (cancelPotentialWork(resId, imageView)) {
        final BitmapWorkerTask task = new BitmapWorkerTask(imageView);
        final AsyncDrawable asyncDrawable =
                new AsyncDrawable(getResources(), mPlaceHolderBitmap, task);
        imageView.setImageDrawable(asyncDrawable);
        task.execute(resId);
    }
  }
  
  
  public static boolean cancelPotentialWork(int data, ImageView imageView) {
    final BitmapWorkerTask bitmapWorkerTask = getBitmapWorkerTask(imageView);

    if (bitmapWorkerTask != null) {
        final int bitmapData = bitmapWorkerTask.data;
        if (bitmapData == 0 || bitmapData != data) {
            // Cancel previous task
            bitmapWorkerTask.cancel(true);
        } else {
            // The same work is already in progress
            return false;
        }
    }
    // No task associated with the ImageView, or an existing task was cancelled
    return true;
}

private static BitmapWorkerTask getBitmapWorkerTask(ImageView imageView) {
   if (imageView != null) {
       final Drawable drawable = imageView.getDrawable();
       if (drawable instanceof AsyncDrawable) {
           final AsyncDrawable asyncDrawable = (AsyncDrawable) drawable;
           return asyncDrawable.getBitmapWorkerTask();
       }
    }
    return null;
}


class BitmapWorkerTask extends AsyncTask {
    ...

    @Override
    protected void onPostExecute(Bitmap bitmap) {
        if (isCancelled()) {
            bitmap = null;
        }

        if (imageViewReference != null && bitmap != null) {
            final ImageView imageView = imageViewReference.get();
            final BitmapWorkerTask bitmapWorkerTask =
                    getBitmapWorkerTask(imageView);
            if (this == bitmapWorkerTask && imageView != null) {
                imageView.setImageBitmap(bitmap);
            }
        }
    }
}
  























+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
参考网页  ： http://hukai.me/android-training-course-in-chinese/graphics/displaying-bitmaps/load-bitmap.html






















